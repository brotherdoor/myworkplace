package blog.store.logic;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;

import blog.domain.Author;
import blog.store.facade.AuthorStore;
import blog.store.mapper.AuthorMapper;
import oracle.jdbc.OracleResultSet.AuthorizationIndicator;

public class AuthorStoreLogic implements AuthorStore{
	
	private SqlSessionFactory factory;
	
	public AuthorStoreLogic() {
		factory = SqlSessionFactoryProvider.getSqlSessionFactory();
	}

	@Override
	public Author findAuthor(String id) {
		SqlSession session = factory.openSession();
		Author author = null;
		try{
			AuthorMapper mapper = session.getMapper(AuthorMapper.class);
			author = mapper.findAuthor(id);
		}finally{
			session.close();
		}
		return author;
	}

	@Override
	public List<Author> findAllAuthors() {
		SqlSession session = factory.openSession();
		List<Author> list = null;
		try{
			AuthorMapper mapper = session.getMapper(AuthorMapper.class);
			list = mapper.findAllAuthors();
		}finally{
			session.close();
		}
		return list;
	}

	@Override
	public List<Author> findAuthorsByName(String name) {
		return null;
	}

	@Override
	public void registAuthor(Author author) {
		
	}

	@Override
	public int updateAuthor(Author author) {
		return 0;
	}

	@Override
	public int deleteAuthor(String id) {
		return 0;
	}

	@Override
	public List<Author> findAuthorsByIds(List<String> ids) {
		SqlSession session = factory.openSession();
		List<Author> list = null;
		try{
			AuthorMapper mapper = session.getMapper(AuthorMapper.class);
			list = mapper.findAuthorsByIds(ids);
		}finally{
			session.close();
		}
		return list;
	}

	@Override
	public List<Author> findAuthorByCondition(Map<String, String> conditionMap) {
		SqlSession session = factory.openSession();
		List<Author> list = null;
		try{
			AuthorMapper mapper = session.getMapper(AuthorMapper.class);
			list = mapper.findAuthorByCondition(conditionMap);
		}finally{
			session.close();
		}
		return list;
	}

}
